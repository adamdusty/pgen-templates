vars = ["project_name"]

[[files]]
path = ".clang-format"
content = """
---
AccessModifierOffset: -4
AlignConsecutiveAssignments: true
AlignTrailingComments: true
AllowAllConstructorInitializersOnNextLine: true
AllowShortBlocksOnASingleLine: true
AllowShortCaseLabelsOnASingleLine: false
AllowShortFunctionsOnASingleLine: Inline
AllowShortIfStatementsOnASingleLine: false
AllowShortLambdasOnASingleLine: Inline
AllowShortLoopsOnASingleLine: false
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: Yes
BinPackArguments: false
BinPackParameters: false
BreakBeforeBraces: Attach
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: AfterColon
ColumnLimit: 120
CompactNamespaces: false
IndentWidth: 4
PointerAlignment: Left
SortIncludes: true
SortUsingDeclarations: true
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: Never
SpaceBeforeRangeBasedForLoopColon: false
SpaceInEmptyParentheses: false
SpacesInAngles: false
SpacesInCStyleCastParentheses: false
SpacesInContainerLiterals: false
SpacesInParentheses: false
SpacesInSquareBrackets: false
"""

[[files]]
path = ".gitignore"
content = """
.vscode/
build/
"""

[[files]]
path = "include/{* lower(project_name) *}/{* lower(project_name) *}.hpp"
content = """
#pragma once

#include <string>

namespace {*lower(project_name)*} {

auto greet() -> std::string;

} // namespace {* lower(project_name) *}"""

[[files]]
path = "src/{* lower(project_name) *}.cpp"
content = """
#include "{* lower(project_name) *}/{* lower(project_name) *}.hpp"

namespace {* lower(project_name) *} {

auto greet() -> std::string {
    return "Hello from {* lower(project_name) *}";
}

} // namespace {*lower(project_name)*}"""

[[files]]
path = "tests/src/{* lower(project_name) *}_test.cpp"
content = """
#include <snitch/snitch.hpp>
#include <{* lower(project_name) *}/{* lower(project_name) *}.hpp>

TEST_CASE("Test case", "[greeting]") {
    REQUIRE({* lower(project_name) *}::greet() == "Hello from {* lower(project_name) *}");
}"""

[[files]]
path = "xmake.lua"
content = """
set_xmakever("2.8.2")

option("test")
    set_default(false)
    set_showmenu(true)
    set_description("Enable tests")
    add_defines("{* upper(project_name) *}_BUILD_TESTS")
option_end()

target("{* project_name *}")
    set_languages("cxx20")
    set_kind("shared")
    add_includedirs("include", { public = true})
    add_files("src/{* project_name *}.cpp")

    add_cxxflags("-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -fcf-protection=full -fstack-clash-protection -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wcast-qual -Wformat=2 -Wundef -Werror=float-equal -Wshadow -Wcast-align -Wunused -Wnull-dereference -Wdouble-promotion -Wimplicit-fallthrough -Wextra-semi -Woverloaded-virtual -Wnon-virtual-dtor -Wold-style-cast", {tools = {"gxx", "clangxx"}})
    add_cxxflags("/sdl /guard:cf /utf-8 /diagnostics:caret /w14165 /w44242 /w44254 /w44263 /w34265 /w34287 /w44296 /w44365 /w44388 /w44464 /w14545 /w14546 /w14547 /w14549 /w14555 /w34619 /w34640 /w24826 /w14905 /w14906 /w14928 /w45038 /W4 /permissive- /volatile:iso /Zc:inline /Zc:preprocessor /Zc:enumTypes /Zc:lambda /Zc:__cplusplus /Zc:externConstexpr /Zc:throwingNew /EHsc", {tools = {"cl", "clang_cl"}})

    -- Analogous to cmake set visibility hidden property
    set_symbols("hidden")
    on_load(function (target)
        import("xmake.export_header")
        export_header("{* lower(project_name) *}", "include/{* lower(project_name) *}/{* lower(project_name) *}_export.hpp")
    end)
    if is_kind("static") then
        add_defines("{* upper(project_name) *}_STATIC_DEFINE")
    end
target_end()

if has_config("test") then
    includes("xmake/snitch.lua")
    add_requires("snitch")

    target("test")
        set_languages("cxx20")
        set_kind("binary")
        add_deps("{* project_name *}")
        add_packages("snitch")
        add_files("tests/src/{* project_name *}_test.cpp")
    target_end()
end
"""

[[files]]
path = "xmake/snitch.lua"
content = """
package("snitch")

    set_homepage("https://github.com/cschreib/snitch")
    set_description("Lightweight C++20 testing framework.")
    set_license("BSL-1.0")

    add_urls("https://github.com/cschreib/snitch.git")
    add_versions("1.2.2", "87260ed")

    add_configs("main", {description = "Using your own main function", default = false, type = "boolean"})

    add_deps("cmake")

    on_install(function (package)
        local configs = {"-DSNITCH_DO_TEST=OFF", "-DSNITCH_CREATE_HEADER_ONLY=OFF"}
        table.insert(configs, "-DCMAKE_BUILD_TYPE=" .. (package:debug() and "Debug" or "Release"))
        table.insert(configs, "-DBUILD_SHARED_LIBS=" .. (package:config("shared") and "ON" or "OFF"))
        table.insert(configs, "-DSNITCH_DEFINE_MAIN=" .. (package:config("main") and "OFF" or "ON"))
        import("package.tools.cmake").install(package, configs)
    end)

    on_test(function (package)
        -- xmake always add main function
        if not package:config("main") then
            return
        end

        assert(package:check_cxxsnippets({test = [[
            #include <snitch/snitch.hpp>

            unsigned int Factorial( unsigned int number ) {
                return number <= 1 ? number : Factorial(number-1)*number;
            }

            TEST_CASE("Factorials are computed", "[factorial]" ) {
                REQUIRE( Factorial(0) == 1 ); // this check will fail
                REQUIRE( Factorial(1) == 1 );
            }
        ]]}, {configs = {languages = "c++20"}}))
    end)
"""

[[files]]
path = "xmake/export_header.lua"
content = """
function _interp(s, tab)
    return (s:gsub('($%b{})', function(w) return tab[w:sub(3, -2)] or w end))
end

function _generate(project_name)
    return _interp([[
#ifndef ${project_name}_EXPORT_H
#define ${project_name}_EXPORT_H

#ifdef ${project_name}_STATIC_DEFINE
#  define ${project_name}_EXPORT
#  define ${project_name}_NO_EXPORT
#else
#  ifndef ${project_name}_EXPORT
#    ifdef ${project_name}_${project_name}_EXPORTS
        /* We are building this library */
#      define ${project_name}_EXPORT __declspec(dllexport)
#    else
        /* We are using this library */
#      define ${project_name}_EXPORT __declspec(dllimport)
#    endif
#  endif

#  ifndef ${project_name}_NO_EXPORT
#    define ${project_name}_NO_EXPORT 
#  endif
#endif

#ifndef ${project_name}_DEPRECATED
#  define ${project_name}_DEPRECATED __declspec(deprecated)
#endif

#ifndef ${project_name}_DEPRECATED_EXPORT
#  define ${project_name}_DEPRECATED_EXPORT ${project_name}_EXPORT ${project_name}_DEPRECATED
#endif

#ifndef ${project_name}_DEPRECATED_NO_EXPORT
#  define ${project_name}_DEPRECATED_NO_EXPORT ${project_name}_NO_EXPORT ${project_name}_DEPRECATED
#endif

#if 0 /* DEFINE_NO_DEPRECATED */
#  ifndef ${project_name}_NO_DEPRECATED
#    define ${project_name}_NO_DEPRECATED
#  endif
#endif

#endif /* ${project_name}_EXPORT_H */
]], {project_name = project_name:upper()})
end

function main(base_name, export_file_name)
    local header = _generate(base_name)
    io.writefile(path.join("$(projectdir)", export_file_name), header)
end
"""
