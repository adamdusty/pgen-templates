variables:
- project_name
- namespace
directories:
- ''
- cmake
- include
- include\{@ namespace @}
- src
- tests
- tests\src
files:
- path: .clang-format
  content: |
    ---
    AccessModifierOffset: -4
    AlignConsecutiveAssignments: true
    AlignTrailingComments: true
    AllowAllConstructorInitializersOnNextLine: true
    AllowShortBlocksOnASingleLine: true
    AllowShortCaseLabelsOnASingleLine: false
    AllowShortFunctionsOnASingleLine: Inline
    AllowShortIfStatementsOnASingleLine: false
    AllowShortLambdasOnASingleLine: Inline
    AllowShortLoopsOnASingleLine: false
    AlwaysBreakBeforeMultilineStrings: false
    AlwaysBreakTemplateDeclarations: Yes
    BinPackArguments: false
    BinPackParameters: false
    BreakBeforeBraces: Attach
    BreakBeforeTernaryOperators: true
    BreakConstructorInitializers: AfterColon
    ColumnLimit: 120
    CompactNamespaces: false
    IndentWidth: 4
    PointerAlignment: Left
    SortIncludes: true
    SortUsingDeclarations: true
    SpaceAfterCStyleCast: false
    SpaceAfterLogicalNot: false
    SpaceAfterTemplateKeyword: false
    SpaceBeforeCpp11BracedList: false
    SpaceBeforeInheritanceColon: true
    SpaceBeforeParens: Never
    SpaceBeforeRangeBasedForLoopColon: false
    SpaceInEmptyParentheses: false
    SpacesInAngles: false
    SpacesInCStyleCastParentheses: false
    SpacesInContainerLiterals: false
    SpacesInParentheses: false
    SpacesInSquareBrackets: false
- path: .clang-tidy
  content: |-
    Checks: "*,
      -abseil-*,
      -altera-*,
      -android-*,
      -fuchsia-*,
      -google-*,
      -llvm*,
      -zircon-*,
      -readability-else-after-return,
      -readability-static-accessed-through-instance,
      -readability-avoid-const-params-in-decls,
      -readability-magic-numbers,
      -readability-identifier-length,
      -cppcoreguidelines-non-private-member-variables-in-classes,
      -cppcoreguidelines-avoid-magic-numbers,
      -misc-non-private-member-variables-in-classes,
      -modernize-use-nodiscard"
- path: .gitignore
  content: |
    .idea/
    .vs/
    .vscode/
    build/
    cmake/open-cpp-coverage.cmake
    cmake-build-*/
    prefix/
    CMakeLists.txt.user
    CMakeUserPresets.json
- path: cmake\compile-options.cmake
  content: "function(add_dev_compile_opts target)\n    target_compile_options(${target} PRIVATE\n        $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:\n            -U_FORTIFY_SOURCE\n            -D_FORTIFY_SOURCE=3\n            -fstack-protector-strong\n            -fcf-protection=full\n            -fstack-clash-protection\n            -Wall\n            -Wextra\n            -Wpedantic\n            -Wconversion\n            -Wsign-conversion\n            -Wcast-qual\n            -Wformat=2\n            -Wundef\n            -Werror=float-equal\n            -Wshadow\n            -Wcast-align\n            -Wunused\n            -Wnull-dereference\n            -Wdouble-promotion\n            -Wimplicit-fallthrough\n            -Wextra-semi\n            -Woverloaded-virtual\n            -Wnon-virtual-dtor\n            -Wold-style-cast>\n            \n        $<$<CXX_COMPILER_ID:MSVC>:\n            /sdl\n            /guard:cf\n            /utf-8\n            /diagnostics:caret\n            /w14165\n            /w44242\n            /w44254\n            /w44263\n            /w34265\n            /w34287\n            /w44296\n            /w44365\n            /w44388\n            /w44464\n            /w14545\n            /w14546\n            /w14547\n            /w14549\n            /w14555\n            /w34619\n            /w34640\n            /w24826\n            /w14905\n            /w14906\n            /w14928\n            /w45038\n            /W4\n            /permissive-\n            /volatile:iso\n            /Zc:inline\n            /Zc:preprocessor\n            /Zc:enumTypes\n            /Zc:lambda\n            /Zc:__cplusplus\n            /Zc:externConstexpr\n            /Zc:throwingNew\n            /EHsc>\n    )\nendfunction()"
- path: cmake\dependencies.cmake
  content: ''
- path: cmake\install-config.cmake
  content: include("${CMAKE_CURRENT_LIST_DIR}/{@ project_name @}Targets.cmake")
- path: cmake\install-rules.cmake
  content: |-
    if(PROJECT_IS_TOP_LEVEL)
      set(
          CMAKE_INSTALL_INCLUDEDIR "include/{@ project_name @}-${PROJECT_VERSION}"
          CACHE PATH ""
      )
    endif()

    set(package {@ project_name @})
    include(GNUInstallDirs)
    include(CMakePackageConfigHelpers)

    # Set up export components
    install(
        TARGETS {@ namespace @}_{@ project_name @}
        EXPORT {@ project_name @}Targets
        RUNTIME COMPONENT {@ project_name @}_Runtime
        LIBRARY COMPONENT {@ project_name @}_Runtime
        NAMELINK_COMPONENT {@ project_name @}_Development
        ARCHIVE COMPONENT {@ project_name @}_Development
        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    )

    # Write package file for installations
    write_basic_package_version_file(
        "${package}ConfigVersion.cmake"
        VERSION ${PACKAGE_VERSION}
        COMPATIBILITY SameMajorVersion
    )

    # Allow package maintainers to freely override the path for the configs
    set(
        {@ project_name @}_INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake/${package}"
        CACHE PATH "CMake package config location relative to the install prefix"
    )
    mark_as_advanced({@ project_name @}_INSTALL_CMAKEDIR)

    # Install config file to the install directory
    install(
        FILES cmake/install-config.cmake
        DESTINATION "${{@ project_name @}_INSTALL_CMAKEDIR}"
        RENAME "${package}Config.cmake"
        COMPONENT {@ project_name @}_Development
    )

    # Install ConfigVersion file
    # More package install info
    install(
        FILES "${PROJECT_BINARY_DIR}/${package}ConfigVersion.cmake"
        DESTINATION "${{@ project_name @}_INSTALL_CMAKEDIR}"
        COMPONENT {@ project_name @}_Development
    )

    # Install the dev component from targets defined above (I think)
    install(
        EXPORT {@ project_name @}Targets
        NAMESPACE {@ namespace @}::
        DESTINATION "${{@ project_name @}_INSTALL_CMAKEDIR}"
        COMPONENT {@ project_name @}_Development
    )

    # Include CPack
    if(PROJECT_IS_TOP_LEVEL)
      include(CPack)
    endif()
- path: cmake\options.cmake
  content: ''
- path: cmake\warning-guard.cmake
  content: |
    # ---- Warning guard ----

    # target_include_directories with the SYSTEM modifier will request the compiler
    # to omit warnings from the provided paths, if the compiler supports that
    # This is to provide a user experience similar to find_package when
    # add_subdirectory or FetchContent is used to consume this project
    set(warning_guard "")
    if(NOT PROJECT_IS_TOP_LEVEL)
        set(warning_guard SYSTEM)
    endif()
- path: CMakeLists.txt
  content: |-
    cmake_minimum_required(VERSION 3.27)

    project(
        {@ project_name @}
        VERSION 0.1.0
        DESCRIPTION "A short description"
        LANGUAGES CXX
    )

    # Include utilities
    include(cmake/options.cmake)
    include(cmake/warning-guard.cmake)
    include(cmake/compile-options.cmake)
    include(cmake/dependencies.cmake)

    # Declare library
    add_library({@ namespace @}_{@ project_name @})
    add_library({@ namespace @}::{@ project_name @} ALIAS {@ namespace @}_{@ project_name @})

    # Generate header for export
    include(GenerateExportHeader)
    generate_export_header(
        {@ namespace @}_{@ project_name @}
        BASE_NAME {@ project_name @}
        EXPORT_FILE_NAME include/{@ namespace @}/export.hpp
        CUSTOM_CONTENT_FROM_VARIABLE pragma_suppress_c4251
    )

    # Add sources
    target_sources({@ namespace @}_{@ project_name @} PRIVATE
        src/{@ project_name @}.cpp
    )

    # Add include directory
    # warning_guard adds SYSTEM modifier if the project isn't top level
    target_include_directories(
        {@ namespace @}_{@ project_name @} ${warning_guard}
        PUBLIC
        "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>"
    )

    target_include_directories({@ namespace @}_{@ project_name @}
        PUBLIC
            "$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>"
    )

    # Include and link dependencies
    #target_link_libraries({@ namespace @}_{@ project_name @})

    # Add compile options
    add_dev_compile_opts({@ namespace @}_{@ project_name @})


    # Set properties
    set_target_properties(
        {@ namespace @}_{@ project_name @} PROPERTIES
        CXX_VISIBILITY_PRESET "hidden"
        VISIBILITY_INLINES_HIDDEN YES
        VERSION "${PROJECT_VERSION}"
        SOVERSION "${PROJECT_VERSION_MAJOR}"
        EXPORT_NAME {@ project_name @}
        OUTPUT_NAME {@ project_name @}
    )

    # Install rules
    if(NOT CMAKE_SKIP_INSTALL_RULES)
      include(cmake/install-rules.cmake)
    endif()

    # Enable testing
    if(BUILD_TESTING)
        include(CTest)
        add_subdirectory(tests)
    endif()
- path: CMakePresets.json
  content: |-
    {
        "version": 6,
        "cmakeMinimumRequired": {
            "major": 3,
            "minor": 27,
            "patch": 0
        },
        "configurePresets": [
            {
                "name": "base",
                "hidden": true,
                "cacheVariables": {
                    "CMAKE_CXX_EXTENSIONS": "OFF",
                    "CMAKE_CXX_STANDARD": "20"
                }
            },
            {
                "name": "dev",
                "binaryDir": "build/dev",
                "inherits": [
                    "base"
                ],
                "cacheVariables": {
                    "CMAKE_BUILD_TYPE": "debug",
                    "CMAKE_EXPORT_COMPILE_COMMANDS": "ON",
                    "CMAKE_COLOR_DIAGNOSTICS": "ON",
                    "BUILD_TESTING": "ON"
                }
            }
        ],
        "buildPresets": [
            {
                "name": "dev",
                "configurePreset": "dev"
            }
        ],
        "testPresets": [
            {
                "name": "dev",
                "configurePreset": "dev",
                "configuration": "Debug",
                "output": {
                    "outputOnFailure": true
                }
            }
        ]
    }
- path: include\{@ namespace @}\{@ project_name @}.hpp
  content: |-
    #pragma once

    #include <cstdint>

    namespace {@ namespace @} {
    auto get_version() -> std::uint64_t;
    }
- path: src\{@ project_name @}.cpp
  content: |-
    #include "{@ namespace @}/{@ project_name @}.hpp"

    namespace {@ namespace @} {
    auto get_version() -> std::uint64_t{ return 1; }
    }
- path: tests\CMakeLists.txt
  content: |
    cmake_minimum_required(VERSION 3.27)

    project(
        {@ project_name @}Tests
        LANGUAGES CXX
    )

    # If test project is built independently, find the project package
    if(PROJECT_IS_TOP_LEVEL)
        find_package({@ project_name @} REQUIRED)
        enable_testing()
    endif()

    # Get the testing library
    include(FetchContent)
    FetchContent_Declare(
        snitch
        GIT_REPOSITORY https://github.com/cschreib/snitch.git
        GIT_TAG        v1.2.2
        GIT_SHALLOW    TRUE
        SYSTEM
        FIND_PACKAGE_ARGS # Use system package if installed
    )
    FetchContent_MakeAvailable(snitch)

    # Add test exe
    add_executable({@ project_name @}_tests)

    # Add test sources
    target_sources({@ project_name @}_tests PRIVATE
        src/{@ project_name @}_test.cpp
    )

    # Link libs
    target_link_libraries({@ project_name @}_tests PRIVATE {@ namespace @}::{@ project_name @} snitch::snitch)

    # Add test
    add_test(NAME {@ project_name @}_tests COMMAND {@ project_name @}_tests)

    # Enable test binary to find the DLL if building a shared lib
    if(BUILD_SHARED_LIBS)
        set_tests_properties({@ project_name @}_tests PROPERTIES
            ENVIRONMENT_MODIFICATION
                "PATH=path_list_append:$<TARGET_FILE_DIR:{@ namespace @}::{@ project_name @}>;PATH=path_list_append:$<TARGET_FILE_DIR:snitch::snitch>"
        )
    endif()
- path: tests\src\{@ project_name @}_test.cpp
  content: |-
    #include <snitch/snitch.hpp>
    #include <{@ namespace @}/{@ project_name @}.hpp>

    TEST_CASE("Test case", "[greeting]") {
        REQUIRE({@ namespace @} ::get_version() == 1);
    }
