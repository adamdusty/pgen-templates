variables:
  - identifier: namespace
    display_name: namespace
  - identifier: project_name
    display_name: project name
directories:
  - cmake
  - include
  - include\{@ namespace @}
  - src
  - tests
  - tests\src
files:
  - path: .clang-format
    content: |
      ---
      AccessModifierOffset: -4
      AlignConsecutiveAssignments: true
      AlignTrailingComments: true
      AllowAllConstructorInitializersOnNextLine: true
      AllowShortBlocksOnASingleLine: true
      AllowShortCaseLabelsOnASingleLine: false
      AllowShortFunctionsOnASingleLine: Inline
      AllowShortIfStatementsOnASingleLine: false
      AllowShortLambdasOnASingleLine: Inline
      AllowShortLoopsOnASingleLine: false
      AlwaysBreakBeforeMultilineStrings: false
      AlwaysBreakTemplateDeclarations: Yes
      BinPackArguments: false
      BinPackParameters: false
      BreakBeforeBraces: Attach
      BreakBeforeTernaryOperators: true
      BreakConstructorInitializers: AfterColon
      ColumnLimit: 120
      CompactNamespaces: false
      IndentWidth: 4
      PointerAlignment: Left
      SortIncludes: true
      SortUsingDeclarations: true
      SpaceAfterCStyleCast: false
      SpaceAfterLogicalNot: false
      SpaceAfterTemplateKeyword: false
      SpaceBeforeCpp11BracedList: false
      SpaceBeforeInheritanceColon: true
      SpaceBeforeParens: Never
      SpaceBeforeRangeBasedForLoopColon: false
      SpaceInEmptyParentheses: false
      SpacesInAngles: false
      SpacesInCStyleCastParentheses: false
      SpacesInContainerLiterals: false
      SpacesInParentheses: false
      SpacesInSquareBrackets: false

  - path: .clang-tidy
    content: |
      Checks: "*,
        -abseil-*,
        -altera-*,
        -android-*,
        -fuchsia-*,
        -google-*,
        -llvm*,
        -zircon-*,
        -readability-else-after-return,
        -readability-static-accessed-through-instance,
        -readability-avoid-const-params-in-decls,
        -readability-magic-numbers,
        -readability-identifier-length,
        -cppcoreguidelines-non-private-member-variables-in-classes,
        -cppcoreguidelines-avoid-magic-numbers,
        -misc-non-private-member-variables-in-classes,
        -modernize-use-nodiscard"

  - path: .gitignore
    content: |
      .idea/
      .vs/
      .vscode/
      build/
      CMakeUserPresets.json

  - path: cmake\compile-options.cmake
    content: |
      set({@ project_name @}_COMPILE_OPTIONS
      $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:
          $<$<CONFIG:Release>:-U_FORTIFY_SOURCE>
          $<$<CONFIG:Release>:-D_FORTIFY_SOURCE=3>
          -fstack-protector-strong
          -fcf-protection=full
          -fstack-clash-protection
          -Wall
          -Wextra
          -Wpedantic
          -Wconversion
          -Wsign-conversion
          -Wcast-qual
          -Wformat=2
          -Wundef
          -Werror=float-equal
          -Wshadow
          -Wcast-align
          -Wunused
          -Wnull-dereference
          -Wdouble-promotion
          -Wimplicit-fallthrough
          -Wextra-semi
          -Woverloaded-virtual
          -Wnon-virtual-dtor
          -Wold-style-cast>
          
      $<$<CXX_COMPILER_ID:MSVC>:
          /sdl
          /guard:cf
          /utf-8
          /diagnostics:caret
          /w14165
          /w44242
          /w44254
          /w44263
          /w34265
          /w34287
          /w44296
          /w44365
          /w44388
          /w44464
          /w14545
          /w14546
          /w14547
          /w14549
          /w14555
          /w34619
          /w34640
          /w24826
          /w14905
          /w14906
          /w14928
          /w45038
          /W4
          /permissive-
          /volatile:iso
          /Zc:inline
          /Zc:preprocessor
          /Zc:enumTypes
          /Zc:lambda
          /Zc:__cplusplus
          /Zc:externConstexpr
          /Zc:throwingNew
          /EHsc>
      )

  - path: cmake\dependencies.cmake
  - path: cmake\install-config.cmake
    content: |
      include("${CMAKE_CURRENT_LIST_DIR}/{@ project_name @}Targets.cmake")

  - path: cmake\install-rules.cmake
    content: |
      if(PROJECT_IS_TOP_LEVEL)
        set(
            CMAKE_INSTALL_INCLUDEDIR "include/{@ project_name @}-${PROJECT_VERSION}"
            CACHE PATH ""
        )
      endif()

      set(package {@ project_name @})
      include(GNUInstallDirs)
      include(CMakePackageConfigHelpers)

      # Set up export components
      install(
          TARGETS {@ namespace @}_{@ project_name @}
          EXPORT {@ project_name @}Targets
          RUNTIME COMPONENT {@ project_name @}_Runtime
          LIBRARY COMPONENT {@ project_name @}_Runtime
          NAMELINK_COMPONENT {@ project_name @}_Development
          ARCHIVE COMPONENT {@ project_name @}_Development
          FILE_SET {@ project_name @}_headers
      )

      # Write package file for installations
      write_basic_package_version_file(
          "${package}ConfigVersion.cmake"
          VERSION ${PACKAGE_VERSION}
          COMPATIBILITY SameMajorVersion
      )

      # Allow package maintainers to freely override the path for the configs
      set(
          {@ project_name @}_INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake/${package}"
          CACHE PATH "CMake package config location relative to the install prefix"
      )
      mark_as_advanced({@ project_name @}_INSTALL_CMAKEDIR)

      install(
          FILES cmake/install-config.cmake
          DESTINATION "${{@ project_name @}_INSTALL_CMAKEDIR}"
          RENAME "${package}Config.cmake"
          COMPONENT {@ project_name @}_Development
      )

      # Install ConfigVersion file
      install(
          FILES "${PROJECT_BINARY_DIR}/${package}ConfigVersion.cmake"
          DESTINATION "${{@ project_name @}_INSTALL_CMAKEDIR}"
          COMPONENT {@ project_name @}_Development
      )

      install(
          EXPORT {@ project_name @}Targets
          NAMESPACE {@ namespace @}::
          DESTINATION "${{@ project_name @}_INSTALL_CMAKEDIR}"
          COMPONENT {@ project_name @}_Development
      )

      # Include CPack
      if(PROJECT_IS_TOP_LEVEL)
        include(CPack)
      endif()

  - path: cmake\options.cmake
  - path: cmake\warning-guard.cmake
    content: |
      # ---- Warning guard ----

      # target_include_directories with the SYSTEM modifier will request the compiler
      # to omit warnings from the provided paths, if the compiler supports that
      # This is to provide a user experience similar to find_package when
      # add_subdirectory or FetchContent is used to consume this project
      set(warning_guard "")
      if(NOT PROJECT_IS_TOP_LEVEL)
          set(warning_guard SYSTEM)
      endif()

  - path: CMakeLists.txt
    content: |
      cmake_minimum_required(VERSION 3.29)

      project(
          {@ project_name @}
          VERSION 0.1.0
          DESCRIPTION "A short description"
          LANGUAGES CXX
      )

      # Include utilities
      include(cmake/options.cmake)
      include(cmake/warning-guard.cmake)
      include(cmake/compile-options.cmake)
      include(cmake/dependencies.cmake)

      # Declare library
      add_library({@ namespace @}_{@ project_name @})
      add_library({@ namespace @}::{@ project_name @} ALIAS {@ namespace @}_{@ project_name @})

      # Generate header for export
      include(GenerateExportHeader)
      generate_export_header(
          {@ namespace @}_{@ project_name @}
          BASE_NAME {@ project_name @}
          EXPORT_FILE_NAME ${CMAKE_CURRENT_SOURCE_DIR}/include/{@ namespace @}/export.hpp
          CUSTOM_CONTENT_FROM_VARIABLE pragma_suppress_c4251
      )

      # Add sources
      target_sources({@ namespace @}_{@ project_name @}
          PUBLIC
              FILE_SET    {@ project_name @}_headers
              TYPE        HEADERS
              BASE_DIRS   include
              FILES
                  "include/{@ namespace @}/{@ project_name @}.hpp"
          PRIVATE
              "src/{@ project_name @}.cpp"
      )
      # Include and link dependencies
      #target_link_libraries({@ namespace @}_{@ project_name @})

      # Add compile options
      target_compile_options({@ namespace @}_{@ project_name @} PRIVATE ${{@ project_name @}_COMPILE_OPTIONS})


      # Set properties
      set_target_properties(
          {@ namespace @}_{@ project_name @} PROPERTIES
          CXX_VISIBILITY_PRESET "hidden"
          VISIBILITY_INLINES_HIDDEN YES
          VERSION "${PROJECT_VERSION}"
          SOVERSION "${PROJECT_VERSION_MAJOR}"
          EXPORT_NAME {@ project_name @}
          OUTPUT_NAME {@ project_name @}
      )

      # Install rules
      if(NOT CMAKE_SKIP_INSTALL_RULES)
        include(cmake/install-rules.cmake)
      endif()

      # Enable testing
      if(BUILD_TESTING)
          include(CTest)
          add_subdirectory(tests)
      endif()

  - path: CMakePresets.json
    content: |
      {
          "version": 6,
          "cmakeMinimumRequired": {
              "major": 3,
              "minor": 27,
              "patch": 0
          },
          "configurePresets": [
              {
                  "name": "base",
                  "hidden": true,
                  "cacheVariables": {
                      "CMAKE_CXX_EXTENSIONS": "OFF",
                      "CMAKE_CXX_STANDARD": "23",
                      "CMAKE_CXX_SCAN_FOR_MODULES": "OFF"
                  }
              },
              {
                  "name": "dev",
                  "binaryDir": "build/dev",
                  "inherits": [
                      "base"
                  ],
                  "cacheVariables": {
                      "CMAKE_BUILD_TYPE": "debug",
                      "CMAKE_EXPORT_COMPILE_COMMANDS": "ON",
                      "CMAKE_COLOR_DIAGNOSTICS": "ON",
                      "BUILD_TESTING": "ON"
                  }
              }
          ],
          "buildPresets": [
              {
                  "name": "dev",
                  "configurePreset": "dev"
              }
          ],
          "testPresets": [
              {
                  "name": "dev",
                  "configurePreset": "dev",
                  "configuration": "debug",
                  "output": {
                      "outputOnFailure": true
                  }
              }
          ]
      }

  - path: include\{@ namespace @}\{@ project_name @}.hpp
    content: |
      #pragma once

      #include <cstdint>

      namespace {@ namespace @} {
      auto get_version() -> std::uint64_t;
      }

  - path: src\{@ project_name @}.cpp
    content: |
      #include "{@ namespace @}/{@ project_name @}.hpp"

      namespace {@ namespace @} {
          auto get_version() -> std::uint64_t {
              return 1;
          }
      } // namespace {@ namespace @}

  - path: tests\CMakeLists.txt
    content: |
      cmake_minimum_required(VERSION 3.27)

      project(
          {@ project_name @}Tests
          LANGUAGES CXX
      )

      # If test project is built independently, find the project package
      if(PROJECT_IS_TOP_LEVEL)
          find_package({@ project_name @} REQUIRED)
          enable_testing()
      endif()

      # Get the testing library
      include(FetchContent)
      FetchContent_Declare(
          snitch
          GIT_REPOSITORY https://github.com/snitch-org/snitch.git
          GIT_TAG        v1.2.5
          SYSTEM
      )
      FetchContent_MakeAvailable(snitch)

      # Add test exe
      add_executable({@ project_name @}_tests)

      # Add test sources
      target_sources({@ project_name @}_tests PRIVATE
          src/{@ project_name @}_tests.cpp
      )

      # Link libs
      target_link_libraries({@ project_name @}_tests PRIVATE {@ namespace @}::{@ project_name @} snitch::snitch)

      # Add test
      add_test(NAME {@ project_name @}_tests COMMAND {@ project_name @}_tests)

      # Enable test binary to find the DLL if building a shared lib
      if(BUILD_SHARED_LIBS)
          set(DLL_DIRS "$<TARGET_RUNTIME_DLL_DIRS:{@ project_name @}_tests>")
          set(ENV_OP "PATH=path_list_append:")

          set_tests_properties({@ project_name @}_tests PROPERTIES
              ENVIRONMENT_MODIFICATION
                  "${ENV_OP}$<JOIN:${DLL_DIRS},$<SEMICOLON>${ENV_OP}>"
          )
      endif()

  - path: tests\src\{@ project_name @}_tests.cpp
    content: |
      #include <snitch/snitch.hpp>
      #include <{@ namespace @}/{@ project_name @}.hpp>

      TEST_CASE("Test case", "[greeting]") {
          REQUIRE({@ namespace @} ::get_version() == 1);
      }