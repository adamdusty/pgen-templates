{
    "vars": [
        "project_name",
        "project_name_lower",
        "project_name_upper"
    ],
    "files": {
        ".clang-format": "---\nAccessModifierOffset: -4\nAlignConsecutiveAssignments: true\nAlignTrailingComments: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowShortBlocksOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLambdasOnASingleLine: Inline\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: AfterColon\nColumnLimit: 120\nCompactNamespaces: false\nIndentWidth: 4\nPointerAlignment: Left\nSortIncludes: true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: Never\nSpaceBeforeRangeBasedForLoopColon: false\nSpaceInEmptyParentheses: false\nSpacesInAngles: false\nSpacesInCStyleCastParentheses: false\nSpacesInContainerLiterals: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\n",
        ".gitignore": ".idea/\n.vs/\n.vscode/\nbuild/\ncmake/open-cpp-coverage.cmake\ncmake-build-*/\nprefix/\nCMakeLists.txt.user\nCMakeUserPresets.json\n",
        "CMakeLists.txt": "cmake_minimum_required(VERSION 3.25)\n\nproject(\n    {{ project_name_lower }}\n    VERSION 0.1.0\n    DESCRIPTION \"A short description\"\n    LANGUAGES CXX\n)\n\ninclude(cmake/variables.cmake)\n\nadd_library(\n    {{ project_name_lower }}_{{ project_name_lower }}\n    src/{{ project_name_lower }}.cpp\n)\nadd_library({{ project_name_lower }}::{{ project_name_lower }} ALIAS {{ project_name_lower }}_{{ project_name_lower }})\n\ninclude(GenerateExportHeader)\ngenerate_export_header(\n    {{ project_name_lower }}_{{ project_name_lower }}\n    BASE_NAME {{ project_name_lower }}\n    EXPORT_FILE_NAME export/{{ project_name_lower }}/{{ project_name_lower }}_export.hpp\n    CUSTOM_CONTENT_FROM_VARIABLE pragma_suppress_c4251\n)\n\nif(NOT BUILD_SHARED_LIBS)\n  target_compile_definitions({{ project_name_lower }}_{{ project_name_lower }} PUBLIC {{ project_name_upper }}_STATIC_DEFINE)\nendif()\n\nset_target_properties(\n    {{ project_name_lower }}_{{ project_name_lower }} PROPERTIES\n    CXX_VISIBILITY_PRESET \"hidden\"\n    VISIBILITY_INLINES_HIDDEN YES\n    VERSION \"${PROJECT_VERSION}\"\n    SOVERSION \"${PROJECT_VERSION_MAJOR}\"\n    EXPORT_NAME {{ project_name_lower }}\n    OUTPUT_NAME {{ project_name_lower }}\n)\n\ntarget_include_directories(\n    {{ project_name_lower }}_{{ project_name_lower }} ${warning_guard}\n    PUBLIC\n    \"$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\"\n)\n\ntarget_include_directories(\n    {{ project_name_lower }}_{{ project_name_lower }} SYSTEM\n    PUBLIC\n    \"$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/export>\"\n)\n\nif(NOT CMAKE_SKIP_INSTALL_RULES)\n  include(cmake/install-rules.cmake)\nendif()\n\ntarget_compile_options({{ project_name_lower }}_{{ project_name_lower }} PRIVATE\n    $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:\n        -Wall\n        -Wextra\n        -Wpedantic\n        -Wconversion\n        -Wsign-conversion\n        -Wcast-qual\n        -Wundef\n        # -Werror=float-equal\n        -Wshadow\n        -Wcast-align\n        -Wunused\n        -Wnull-dereference\n        -Wdouble-promotion\n        -Wimplicit-fallthrough\n        -Woverloaded-virtual\n        -Wnon-virtual-dtor\n        -Wold-style-cast\n    >\n\n    $<$<CXX_COMPILER_ID:MSVC>:\n        /utf-8\n        /w14165\n        /w44242\n        /w44254\n        /w44263\n        /w34265\n        /w34287\n        /w44296\n        /w44365\n        /w44388\n        /w44464\n        /w14545\n        /w14546\n        /w14547\n        /w14549\n        /w14555\n        /w34619\n        /w34640\n        /w24826\n        /w14905\n        /w14928\n        /w45038\n        /w44242\n        /persmissive-\n        /volatile:iso\n        /Zc:preprocessor\n        /Zc:__cplusplus\n        /Zc:externConstexpr\n        /Zc:throwingNew\n        /EHsc\n    >\n)\n\nif({{ project_name_upper }}_TEST)\n    include(CTest)\n    add_subdirectory(tests)\nendif()",
        "CMakePresets.json": "{\n    \"version\": 6,\n    \"cmakeMinimumRequired\": {\n        \"major\": 3,\n        \"minor\": 25,\n        \"patch\": 0\n    },\n    \"configurePresets\": [\n        {\n            \"name\": \"dev-base\",\n            \"binaryDir\": \"./build/debug\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"{{ project_name_upper }}_TEST\": \"ON\",\n                \"CMAKE_CXX_EXTENSIONS\": \"OFF\",\n                \"CMAKE_CXX_STANDARD\": \"20\",\n                \"CMAKE_COLOR_DIAGNOSTICS\": \"ON\",\n                \"CMAKE_EXPORT_COMPILE_COMMANDS\": \"ON\",\n                \"CMAKE_BUILD_TYPE\": \"debug\",\n                \"BUILD_SHARED_LIBS\": \"ON\"\n            }\n        },\n        {\n            \"name\": \"release-base\",\n            \"binaryDir\": \"./build/release\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"{{ project_name_upper }}_TEST\": \"OFF\",\n                \"CMAKE_CXX_EXTENSIONS\": \"OFF\",\n                \"CMAKE_CXX_STANDARD\": \"20\",\n                \"CMAKE_COLOR_DIAGNOSTICS\": \"ON\",\n                \"CMAKE_BUILD_TYPE\": \"release\",\n                \"BUILD_SHARED_LIBS\": \"ON\"\n            }\n        }\n    ]\n}",
        "CMakeUserPresets.json": "{\n    \"version\": 6,\n    \"cmakeMinimumRequired\": {\n        \"major\": 3,\n        \"minor\": 25,\n        \"patch\": 0\n    },\n    \"configurePresets\": [\n        {\n            \"name\": \"dev\",\n            \"inherits\": [\n                \"dev-base\"\n            ]\n        },\n        {\n            \"name\": \"release\",\n            \"inherits\": [\n                \"release-base\"\n            ]\n        }\n    ],\n    \"buildPresets\": [\n        {\n            \"name\": \"dev\",\n            \"configurePreset\": \"dev\"\n        },\n        {\n            \"name\": \"release\",\n            \"configurePreset\": \"release\"\n        }\n    ],\n    \"testPresets\": [\n        {\n            \"name\": \"dev\",\n            \"configurePreset\": \"dev\",\n            \"configuration\": \"Debug\",\n            \"output\": {\n                \"outputOnFailure\": true\n            }\n        }\n    ]\n}",
        "cmake/install-config.cmake": "include(\"${CMAKE_CURRENT_LIST_DIR}/{{ project_name_lower }}Targets.cmake\")",
        "cmake/install-rules.cmake": "if(PROJECT_IS_TOP_LEVEL)\n  set(\n      CMAKE_INSTALL_INCLUDEDIR \"include/{{ project_name_lower }}-${PROJECT_VERSION}\"\n      CACHE PATH \"\"\n  )\nendif()\n\nset(package {{ project_name_lower }})\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\ninstall(\n    DIRECTORY\n    include/\n    \"${PROJECT_BINARY_DIR}/export/\"\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n    COMPONENT {{ project_name_lower }}_Development\n)\n\ninstall(\n    TARGETS {{ project_name_lower }}_{{ project_name_lower }}\n    EXPORT {{ project_name_lower }}Targets\n    RUNTIME COMPONENT {{ project_name_lower }}_Runtime\n    LIBRARY COMPONENT {{ project_name_lower }}_Runtime\n    NAMELINK_COMPONENT {{ project_name_lower }}_Development\n    ARCHIVE COMPONENT {{ project_name_lower }}_Development\n    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n)\n\nwrite_basic_package_version_file(\n    \"${package}ConfigVersion.cmake\"\n    VERSION ${PACKAGE_VERSION}\n    COMPATIBILITY SameMajorVersion\n)\n\n# Allow package maintainers to freely override the path for the configs\nset(\n    {{ project_name_lower }}_INSTALL_CMAKEDIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${package}\"\n    CACHE PATH \"CMake package config location relative to the install prefix\"\n)\nmark_as_advanced({{ project_name_lower }}_INSTALL_CMAKEDIR)\n\ninstall(\n    FILES cmake/install-config.cmake\n    DESTINATION \"${{{ project_name_lower }}_INSTALL_CMAKEDIR}\"\n    RENAME \"${package}Config.cmake\"\n    COMPONENT {{ project_name_lower }}_Development\n)\n\ninstall(\n    FILES \"${PROJECT_BINARY_DIR}/${package}ConfigVersion.cmake\"\n    DESTINATION \"${{{ project_name_lower }}_INSTALL_CMAKEDIR}\"\n    COMPONENT {{ project_name_lower }}_Development\n)\n\ninstall(\n    EXPORT {{ project_name_lower }}Targets\n    NAMESPACE {{ project_name_lower }}::\n    DESTINATION \"${{{ project_name_lower }}_INSTALL_CMAKEDIR}\"\n    COMPONENT {{ project_name_lower }}_Development\n)\n\nif(PROJECT_IS_TOP_LEVEL)\n  include(CPack)\nendif()",
        "cmake/variables.cmake": "\n# ---- Warning guard ----\n\n# target_include_directories with the SYSTEM modifier will request the compiler\n# to omit warnings from the provided paths, if the compiler supports that\n# This is to provide a user experience similar to find_package when\n# add_subdirectory or FetchContent is used to consume this project\nset(warning_guard \"\")\nif(NOT PROJECT_IS_TOP_LEVEL)\n  option(\n      {{ project_name_lower }}_INCLUDES_WITH_SYSTEM\n      \"Use SYSTEM modifier for bare's includes, disabling warnings\"\n      ON\n  )\n  mark_as_advanced({{ project_name_lower }}_INCLUDES_WITH_SYSTEM)\n  if({{ project_name_lower }}_INCLUDES_WITH_SYSTEM)\n    set(warning_guard SYSTEM)\n  endif()\nendif()\n",
        "include/{{ project_name_lower }}/{{ project_name_lower }}.hpp": "#pragma once\n\n#include <string>\n\nnamespace {{project_name_lower}} {\n\nauto greet() -> std::string;\n\n} // namespace {{ project_name_lower }}",
        "src/{{ project_name_lower }}.cpp": "#include \"{{ project_name_lower }}/{{ project_name_lower }}.hpp\"\n\nnamespace {{ project_name_lower }} {\n\nauto greet() -> std::string {\n    return \"Hello from {{ project_name_lower }}\";\n}\n\n} // namespace {{project_name_lower}}",
        "tests/CMakeLists.txt": "cmake_minimum_required(VERSION 3.25)\n\nproject(\n    {{ project_name_lower }}Tests\n    LANGUAGES CXX\n)\n\nif(PROJECT_IS_TOP_LEVEL)\n    find_package({{ project_name_lower }} REQUIRED)\n    enable_testing()\nendif()\n\nfind_package(Catch2 3 REQUIRED)\n\nadd_executable({{ project_name_lower }}_tests\n    src/{{ project_name_lower }}_test.cpp\n)\n\ntarget_link_libraries({{ project_name_lower }}_tests PRIVATE {{ project_name_lower }}::{{ project_name_lower }} Catch2::Catch2WithMain)\n\nadd_test(NAME {{ project_name_lower }}_tests COMMAND {{ project_name_lower }}_tests)\n\n# Enable test binary to find the DLL if building a shared lib\nif(BUILD_SHARED_LIBS)\n    set_tests_properties({{ project_name_lower }}_tests PROPERTIES\n        ENVIRONMENT_MODIFICATION \"PATH=path_list_append:$<TARGET_FILE_DIR:{{ project_name_lower }}::{{ project_name_lower }}>/\"\n    )\nendif()",
        "tests/src/{{ project_name_lower }}_test.cpp": "#include <catch2/catch_test_macros.hpp>\n#include <{{ project_name_lower }}/{{ project_name_lower }}.hpp>\n\nTEST_CASE(\"Test case\", \"[greeting]\") {\n    REQUIRE({{ project_name_lower }}::greet() == \"Hello from {{ project_name_lower }}\");\n}"
    }
}