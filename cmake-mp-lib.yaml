variables:
  - identifier: namespace
    display_name: Namespace
  - identifier: project_name
    display_name: Project Name
directories:
  - cmake
  - include
  - include/{@ namespace @}
  - src
files:
  - path: cmake/compile-options.cmake
    content: |
      function(add_dev_compile_opts target)
          target_compile_options(${target} PRIVATE
              $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:
                  $<$<CONFIG:Release>:-U_FORTIFY_SOURCE>
                  $<$<CONFIG:Release>:-D_FORTIFY_SOURCE=3>
                  -fstack-protector-strong
                  -fcf-protection=full
                  -fstack-clash-protection
                  -Wall
                  -Wextra
                  -Wpedantic
                  -Wconversion
                  -Wsign-conversion
                  -Wcast-qual
                  -Wformat=2
                  -Wundef
                  -Werror=float-equal
                  -Wshadow
                  -Wcast-align
                  -Wunused
                  -Wnull-dereference
                  -Wdouble-promotion
                  -Wimplicit-fallthrough
                  -Wextra-semi
                  -Woverloaded-virtual
                  -Wnon-virtual-dtor
                  -Wold-style-cast>
                  
              $<$<CXX_COMPILER_ID:MSVC>:
                  /sdl
                  /guard:cf
                  /utf-8
                  /diagnostics:caret
                  /w14165
                  /w44242
                  /w44254
                  /w44263
                  /w34265
                  /w34287
                  /w44296
                  /w44365
                  /w44388
                  /w44464
                  /w14545
                  /w14546
                  /w14547
                  /w14549
                  /w14555
                  /w34619
                  /w34640
                  /w24826
                  /w14905
                  /w14906
                  /w14928
                  /w45038
                  /W4
                  /permissive-
                  /volatile:iso
                  /Zc:inline
                  /Zc:preprocessor
                  /Zc:enumTypes
                  /Zc:lambda
                  /Zc:__cplusplus
                  /Zc:externConstexpr
                  /Zc:throwingNew
                  /EHsc>
          )
      endfunction()
  - path: cmake/dependencies.cmake
  - path: cmake/install-config.cmake
    content: |
      include("${CMAKE_CURRENT_LIST_DIR}/{@ project_name @}Targets.cmake")
  - path: cmake/install-rules.cmake
    content: |
      if(PROJECT_IS_TOP_LEVEL)
        set(
            CMAKE_INSTALL_INCLUDEDIR "include/{@ project_name @}-${PROJECT_VERSION}"
            CACHE PATH ""
        )
      endif()

      set(package {@ project_name @})
      include(GNUInstallDirs)
      include(CMakePackageConfigHelpers)

      # Set up export components
      install(
          TARGETS {@ namespace @}_{@ project_name @}
          EXPORT {@ project_name @}Targets
          RUNTIME COMPONENT {@ project_name @}_Runtime
          LIBRARY COMPONENT {@ project_name @}_Runtime
          NAMELINK_COMPONENT {@ project_name @}_Development
          ARCHIVE COMPONENT {@ project_name @}_Development
          INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
      )

      # Write package file for installations
      write_basic_package_version_file(
          "${package}ConfigVersion.cmake"
          VERSION ${PACKAGE_VERSION}
          COMPATIBILITY SameMajorVersion
      )

      # Allow package maintainers to freely override the path for the configs
      set(
          {@ project_name @}_INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake/${package}"
          CACHE PATH "CMake package config location relative to the install prefix"
      )
      mark_as_advanced({@ project_name @}_INSTALL_CMAKEDIR)

      # Install config file to the install directory
      install(
          FILES cmake/install-config.cmake
          DESTINATION "${{@ project_name @}_INSTALL_CMAKEDIR}"
          RENAME "${package}Config.cmake"
          COMPONENT {@ project_name @}_Development
      )

      # Install ConfigVersion file
      # More package install info
      install(
          FILES "${PROJECT_BINARY_DIR}/${package}ConfigVersion.cmake"
          DESTINATION "${{@ project_name @}_INSTALL_CMAKEDIR}"
          COMPONENT {@ project_name @}_Development
      )

      # Install the dev component from targets defined above (I think)
      install(
          EXPORT {@ project_name @}Targets
          NAMESPACE {@ namespace @}::
          DESTINATION "${{@ project_name @}_INSTALL_CMAKEDIR}"
          COMPONENT {@ project_name @}_Development
      )

      # Include CPack
      if(PROJECT_IS_TOP_LEVEL)
        include(CPack)
      endif()
  - path: cmake/options.cmake
  - path: cmake/warning-guard.cmake
    content: |
      set(warning_guard "")
      if(NOT PROJECT_IS_TOP_LEVEL)
          set(warning_guard SYSTEM)
      endif()

  - path: CMakeLists.txt
    content: |
      cmake_minimum_required(VERSION 3.28)

      project(
          {@ project_name @}
          VERSION 0.1.0
          DESCRIPTION "A short description"
          LANGUAGES CXX
      )

      # Include utilities
      include(cmake/options.cmake)
      include(cmake/warning-guard.cmake)
      include(cmake/compile-options.cmake)
      include(cmake/dependencies.cmake)

      # Declare library
      add_library({@ namespace @}_{@ project_name @})
      add_library({@ namespace @}::{@ project_name @} ALIAS {@ namespace @}_{@ project_name @})

      # Generate header for export
      include(GenerateExportHeader)
      generate_export_header(
          {@ namespace @}_{@ project_name @}
          BASE_NAME {@ project_name @}
          EXPORT_FILE_NAME include/{@ namespace @}/export.hpp
          CUSTOM_CONTENT_FROM_VARIABLE pragma_suppress_c4251
      )

      # Add sources
      target_sources({@ namespace @}_{@ project_name @} PRIVATE
          src/{@ project_name @}.cpp
      )

      # Add include directory
      # warning_guard adds SYSTEM modifier if the project isn't top level
      target_include_directories(
          {@ namespace @}_{@ project_name @} ${warning_guard}
          PUBLIC
          "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>"
      )

      target_include_directories({@ namespace @}_{@ project_name @} SYSTEM
          PUBLIC
              "$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>"
      )

      # Include and link dependencies
      #target_link_libraries({@ namespace @}_{@ project_name @})

      # Add compile options
      add_dev_compile_opts({@ namespace @}_{@ project_name @})


      # Set properties
      set_target_properties(
          {@ namespace @}_{@ project_name @} PROPERTIES
          CXX_VISIBILITY_PRESET "hidden"
          VISIBILITY_INLINES_HIDDEN YES
          VERSION "${PROJECT_VERSION}"
          SOVERSION "${PROJECT_VERSION_MAJOR}"
          EXPORT_NAME {@ project_name @}
          OUTPUT_NAME {@ project_name @}
      )

      # Install rules
      if(NOT CMAKE_SKIP_INSTALL_RULES)
        include(cmake/install-rules.cmake)
      endif()

  - path: include/{@ namespace @}/{@ project_name @}.hpp
    content: |
      #pragma once

      #include <cstdint>

      namespace {@ namespace @} {
              
      auto get_version() -> std::uint64_t;

      }
  - path: src/{@ project_name @}.cpp
    content: |
      #include "{@ namespace @}/{@ project_name @}.hpp"

      namespace {@ namespace @} {
          
      auto get_version() -> std::uint64_t{ return 1; }

      }